--
-- PostgreSQL database dump
--

-- Dumped from database version 9.2.3
-- Dumped by pg_dump version 9.2.3
-- Started on 2013-12-09 19:12:12

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 2063 (class 1262 OID 16395)
-- Dependencies: 2062
-- Name: HciIngenio; Type: COMMENT; Schema: -; Owner: usringenio
--

COMMENT ON DATABASE "HciIngenio" IS 'Base de datos del programa Hci Ingenio';


--
-- TOC entry 183 (class 3079 OID 11727)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2066 (class 0 OID 0)
-- Dependencies: 183
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- TOC entry 584 (class 1247 OID 41014)
-- Name: t_usuarios; Type: TYPE; Schema: public; Owner: usringenio
--

CREATE TYPE t_usuarios AS (
	idusuario integer,
	codigo character varying(25),
	nombres character varying(50),
	apellidos character varying(50),
	correo character varying(100),
	identificacion character varying(12),
	idperfil smallint,
	perfil character varying(25),
	perfilactivo boolean,
	cambiarclave boolean,
	fechacreacion timestamp without time zone,
	ultimoingreso timestamp without time zone,
	bloqueado boolean,
	fechabloqueado timestamp without time zone,
	fechadesbloqueado timestamp without time zone
);


ALTER TYPE public.t_usuarios OWNER TO usringenio;

--
-- TOC entry 209 (class 1255 OID 24605)
-- Name: fn_configuracion_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idconf alias for $1;
BEGIN
	delete from configuracion where idconfiguracion = idconf;
	if found then
		return 1; -- Se borro correctamente
	else
		return 0; -- Error de la base de datos
	end if;
END;
$_$;


ALTER FUNCTION public.fn_configuracion_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2067 (class 0 OID 0)
-- Dependencies: 209
-- Name: FUNCTION fn_configuracion_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_del(smallint) IS 'Funcion que permite borrar parametros en la tabla configuracion';


--
-- TOC entry 208 (class 1255 OID 24604)
-- Name: fn_configuracion_ins(character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_ins(character varying, character varying, boolean DEFAULT true) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	param alias for $1;
	valor alias for $2;
	activ alias for $3;
BEGIN
	insert into configuracion values (default, param, valor, activ);
	if found then
		return currval('sqc_configuracion'); -- Se ingreso correctamente el parametro
	else
		return 0; -- Error de la base de datos
	end if;
END;
$_$;


ALTER FUNCTION public.fn_configuracion_ins(character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2068 (class 0 OID 0)
-- Dependencies: 208
-- Name: FUNCTION fn_configuracion_ins(character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_ins(character varying, character varying, boolean) IS 'Funcion que permite insertar parametros en la tabla configuracion';


--
-- TOC entry 173 (class 1259 OID 24576)
-- Name: sqc_configuracion; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_configuracion
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_configuracion OWNER TO usringenio;

--
-- TOC entry 2069 (class 0 OID 0)
-- Dependencies: 173
-- Name: SEQUENCE sqc_configuracion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_configuracion IS 'Secuencia para el consecutivo de la tabla configuracion';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 174 (class 1259 OID 24595)
-- Name: configuracion; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE configuracion (
    idconfiguracion smallint DEFAULT nextval('sqc_configuracion'::regclass) NOT NULL,
    parametro character varying(50) NOT NULL,
    valorparametro character varying(50) NOT NULL,
    activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.configuracion OWNER TO usringenio;

--
-- TOC entry 2070 (class 0 OID 0)
-- Dependencies: 174
-- Name: TABLE configuracion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE configuracion IS 'Tabla que contiene la configuracion general del sistema';


--
-- TOC entry 2071 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN configuracion.idconfiguracion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.idconfiguracion IS 'Consecutivo de configuracion';


--
-- TOC entry 2072 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN configuracion.parametro; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.parametro IS 'Nombre del parametro de configuracion';


--
-- TOC entry 2073 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN configuracion.valorparametro; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.valorparametro IS 'Valor del parametro de configuracion';


--
-- TOC entry 2074 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN configuracion.activo; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.activo IS 'Identifica si el parametro esta activo o no';


--
-- TOC entry 207 (class 1255 OID 24603)
-- Name: fn_configuracion_sel(smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_sel(smallint DEFAULT (-1), character varying DEFAULT 'NINGUNO'::character varying, boolean DEFAULT true) RETURNS SETOF configuracion
    LANGUAGE plpgsql
    AS $_$
declare
	tipo alias for $1;
	para alias for $2;
	acti alias for $3;
begin
	if tipo = 0 then -- Consulta todos los parametros
		return query select idconfiguracion, parametro, valorparametro, activo from configuracion;
	elsif tipo = 1 then -- Consulta de un parametro especifico
		return query select idconfiguracion, parametro, valorparametro, activo from configuracion where parametro = upper(para);
	end if;
end;
$_$;


ALTER FUNCTION public.fn_configuracion_sel(smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2075 (class 0 OID 0)
-- Dependencies: 207
-- Name: FUNCTION fn_configuracion_sel(smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_sel(smallint, character varying, boolean) IS 'Funcion que consulta los registros de la tabla configuracion';


--
-- TOC entry 210 (class 1255 OID 24606)
-- Name: fn_configuracion_upd(smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_upd(smallint, character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idconf alias for $1;
	parame alias for $2;
	valorp alias for $3;
	activa alias for $4;
BEGIN
	update configuracion set parametro = upper(parame), valorparametro = upper(valorp), activo = activa where idconfiguracion = idconf;
	if found then
		return 1; -- Se actualizÃ³ correctamente
	else
		return 0; -- Error de la base de datos
	end if;
END;
$_$;


ALTER FUNCTION public.fn_configuracion_upd(smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2076 (class 0 OID 0)
-- Dependencies: 210
-- Name: FUNCTION fn_configuracion_upd(smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_upd(smallint, character varying, character varying, boolean) IS 'Funcion que permite actualizar parametros en la tabla configuracion';


--
-- TOC entry 225 (class 1255 OID 57376)
-- Name: fn_credenciales_del(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_del(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
  idc alias for $1;
begin
  delete from credenciales where cre_id=idc;
  perform fn_credenciales_delall();
  return 1;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_del(integer) OWNER TO usringenio;

--
-- TOC entry 2077 (class 0 OID 0)
-- Dependencies: 225
-- Name: FUNCTION fn_credenciales_del(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_del(integer) IS 'Funcion que borra la credencial del usuario actual y llama la funcion de borrado de las credenciales que excedieron el tiempo de inactividad';


--
-- TOC entry 213 (class 1255 OID 24649)
-- Name: fn_credenciales_delall(); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_delall() RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
  delete from credenciales where (extract(epoch from now()-cre_ultimaaccion)/60)::integer > (select valorparametro::integer from configuracion where parametro = 'TIEMPOCREDENCIAL' limit 1);
end;
$$;


ALTER FUNCTION public.fn_credenciales_delall() OWNER TO usringenio;

--
-- TOC entry 2078 (class 0 OID 0)
-- Dependencies: 213
-- Name: FUNCTION fn_credenciales_delall(); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_delall() IS 'Funcion que borra las credenciales que excedieron el tiempo limite de inactividad';


--
-- TOC entry 214 (class 1255 OID 24650)
-- Name: fn_credenciales_ins(integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_ins(integer, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
  nom alias for $2;
  hip alias for $3;
  hno alias for $4;
begin
  insert into credenciales values (default, idu, nom, hip, hno, default, default);
  if found then
    return currval('sqc_credencial'); -- Se ingreso correctamente la credencial
  else
    return 0; -- Error de la base de datos
  end if;
exception
  when foreign_key_violation then
    return -1; -- No se puede ingresar un usuario que no existe
end;
$_$;


ALTER FUNCTION public.fn_credenciales_ins(integer, character varying, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2079 (class 0 OID 0)
-- Dependencies: 214
-- Name: FUNCTION fn_credenciales_ins(integer, character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_ins(integer, character varying, character varying, character varying) IS 'Funcion que permite ingresar registros a la tabla credenciales';


--
-- TOC entry 168 (class 1259 OID 16410)
-- Name: sqc_credencial; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_credencial
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE;


ALTER TABLE public.sqc_credencial OWNER TO usringenio;

--
-- TOC entry 2080 (class 0 OID 0)
-- Dependencies: 168
-- Name: SEQUENCE sqc_credencial; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_credencial IS 'Secuencia de las credenciales';


--
-- TOC entry 176 (class 1259 OID 24635)
-- Name: credenciales; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE credenciales (
    cre_id integer DEFAULT nextval('sqc_credencial'::regclass) NOT NULL,
    cre_idusuario integer NOT NULL,
    cre_nombre character varying(110) NOT NULL,
    cre_hostip character varying(50) NOT NULL,
    cre_hostnombre character varying(50) NOT NULL,
    cre_creacion timestamp without time zone DEFAULT now() NOT NULL,
    cre_ultimaaccion timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.credenciales OWNER TO usringenio;

--
-- TOC entry 2081 (class 0 OID 0)
-- Dependencies: 176
-- Name: TABLE credenciales; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE credenciales IS 'Tabla que contendra temporalemente las credenciales de los usuarios que ingresan correctamente';


--
-- TOC entry 215 (class 1255 OID 24651)
-- Name: fn_credenciales_sel(smallint, integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_sel(smallint, integer) RETURNS SETOF credenciales
    LANGUAGE plpgsql
    AS $_$
declare
  tip alias for $1;
  idc alias for $2;
begin
  if tip=0 then -- Consulta por id de credencial
    return query select * from credenciales where cre_id=idc;
  elsif tip=1 then -- Consulta de todas las credenciales
    return query select * from credenciales;
  end if;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_sel(smallint, integer) OWNER TO usringenio;

--
-- TOC entry 2082 (class 0 OID 0)
-- Dependencies: 215
-- Name: FUNCTION fn_credenciales_sel(smallint, integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_sel(smallint, integer) IS 'Funcion que consulta o selecciona las credenciales';


--
-- TOC entry 216 (class 1255 OID 24652)
-- Name: fn_credenciales_upd(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_upd(integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idc alias for $1;
begin
  update credenciales set cre_ultimaaccion=now() where cre_id=idc;
  if found then
    return 1; -- Actualizacion correcta
  else
    return 2; -- No existe la credencial a actualizar
  end if;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_upd(integer) OWNER TO usringenio;

--
-- TOC entry 2083 (class 0 OID 0)
-- Dependencies: 216
-- Name: FUNCTION fn_credenciales_upd(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_upd(integer) IS 'Funcion que permite actualizar la fecha y hora de la ultima accion realizada desde el aplicativo';


--
-- TOC entry 217 (class 1255 OID 24653)
-- Name: fn_credenciales_val(integer, integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_val(integer, integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idc alias for $1;
  idu alias for $2;
  can int;
begin
  select count(*) into can from credenciales 
      where cre_id=idc and cre_idusuario=idu 
      and (select extract(epoch from (now()-cre_ultimaaccion))/60)<=(select valorparametro::integer from configuracion where parametro = 'TIEMPOCREDENCIAL' limit 1);
  return can;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_val(integer, integer) OWNER TO usringenio;

--
-- TOC entry 2084 (class 0 OID 0)
-- Dependencies: 217
-- Name: FUNCTION fn_credenciales_val(integer, integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_val(integer, integer) IS 'Funcion que valida si la credencial existe o no';


--
-- TOC entry 196 (class 1255 OID 16421)
-- Name: fn_objetos_del(character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_del(character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	cod alias for $1;
begin
	delete from objetos where obj_codigo=cod;
	if found then
		return 1; -- Se borro el registro
	else
		return 2; -- Error de base de datos
	end if;
exception
	when foreign_key_violation then
		return 3; -- Existe informacion foranea
end;
$_$;


ALTER FUNCTION public.fn_objetos_del(character varying) OWNER TO usringenio;

--
-- TOC entry 2085 (class 0 OID 0)
-- Dependencies: 196
-- Name: FUNCTION fn_objetos_del(character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_del(character varying) IS 'Funcion que permite borrar registros de la tabla objetos';


--
-- TOC entry 197 (class 1255 OID 16422)
-- Name: fn_objetos_ins(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_ins(character varying, character varying, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	cod alias for $1;
	nom alias for $2;
	des alias for $3;
begin
	insert into objetos (obj_codigo, obj_nombre, obj_descripcion, obj_activo) values (cod, nom, des, default);
	if found then
		return 1; -- Se ingreso correctamente el registro
	else
		return 2; -- Error en la base de datos
	end if;
exception
	when unique_violation then
		return 3; -- Ya existe ese codigo
end;
$_$;


ALTER FUNCTION public.fn_objetos_ins(character varying, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2086 (class 0 OID 0)
-- Dependencies: 197
-- Name: FUNCTION fn_objetos_ins(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_ins(character varying, character varying, character varying) IS 'Funcion que permite ingresar registros a la tabla objetos';


--
-- TOC entry 169 (class 1259 OID 16423)
-- Name: objetos; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE objetos (
    obj_codigo character varying(15) NOT NULL,
    obj_nombre character varying(50) NOT NULL,
    obj_descripcion character varying(100) NOT NULL,
    obj_activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.objetos OWNER TO usringenio;

--
-- TOC entry 2087 (class 0 OID 0)
-- Dependencies: 169
-- Name: TABLE objetos; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE objetos IS 'Tabla que contiene los objetos del aplicativo';


--
-- TOC entry 198 (class 1255 OID 16427)
-- Name: fn_objetos_sel(smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_sel(smallint, character varying, character varying, boolean) RETURNS SETOF objetos
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	cod alias for $2;
	nom alias for $3;
	act alias for $4;
begin
	if tip=0 then -- Consulta por codigo
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos where obj_codigo=cod;
	elsif tip=1 then -- Conslta por nombre
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos where obj_nombre like nom;
	elsif tip=2 then -- Consulta por activo
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos where obj_activo=act;
	elsif tip=3 then -- Consulta de todos los registros
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos;
	end if;
end;
$_$;


ALTER FUNCTION public.fn_objetos_sel(smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2088 (class 0 OID 0)
-- Dependencies: 198
-- Name: FUNCTION fn_objetos_sel(smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_sel(smallint, character varying, character varying, boolean) IS 'Funcion que retorna los objetos';


--
-- TOC entry 199 (class 1255 OID 16428)
-- Name: fn_objetos_upd(character varying, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_upd(character varying, character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	cod alias for $1;
	nom alias for $2;
	des alias for $3;
	act alias for $4;
begin
	update objetos set obj_nombre=nom, obj_descripcion=des, obj_activo=act where obj_codigo=cod;
	if found then
		return 1;
	else
		return 2;
	end if;
end;
$_$;


ALTER FUNCTION public.fn_objetos_upd(character varying, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2089 (class 0 OID 0)
-- Dependencies: 199
-- Name: FUNCTION fn_objetos_upd(character varying, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_upd(character varying, character varying, character varying, boolean) IS 'Funcion que permite actualizar la informacion de la tabla objetos';


--
-- TOC entry 200 (class 1255 OID 16429)
-- Name: fn_objetosxperfil_triupdobj(); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetosxperfil_triupdobj() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	insert into objetosxperfil select idperfil, NEW.obj_codigo, false, false, false, false from perfiles;
return new;
end;
$$;


ALTER FUNCTION public.fn_objetosxperfil_triupdobj() OWNER TO usringenio;

--
-- TOC entry 2090 (class 0 OID 0)
-- Dependencies: 200
-- Name: FUNCTION fn_objetosxperfil_triupdobj(); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetosxperfil_triupdobj() IS 'Funcion que permite actualizar la tabla objetosxperfil cuando se crea un nuevo objeto';


--
-- TOC entry 201 (class 1255 OID 16430)
-- Name: fn_objetosxperfil_triupdper(); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetosxperfil_triupdper() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	insert into objetosxperfil select NEW.idperfil, obj_codigo, false, false, false, false from objetos;
return new;
end;
$$;


ALTER FUNCTION public.fn_objetosxperfil_triupdper() OWNER TO usringenio;

--
-- TOC entry 2091 (class 0 OID 0)
-- Dependencies: 201
-- Name: FUNCTION fn_objetosxperfil_triupdper(); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetosxperfil_triupdper() IS 'Funcion que permite actualizar la tabla objetosxperfil cuando se crea un nuevo perfil';


--
-- TOC entry 205 (class 1255 OID 16431)
-- Name: fn_objetosxperfil_val(smallint, smallint, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetosxperfil_val(smallint, smallint, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	per alias for $2;
	obj alias for $3;
	res smallint := 0;
begin
	if tip=1 then -- Si es insertar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_insertar=true;
	elsif tip=2 then -- Si es modificar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_modificar=true;
	elsif tip=3 then -- Si es borrar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_borrar=true;
	elsif tip=4 then -- Si es consultar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_consultar=true;
	end if;
return res;
end;
$_$;


ALTER FUNCTION public.fn_objetosxperfil_val(smallint, smallint, character varying) OWNER TO usringenio;

--
-- TOC entry 2092 (class 0 OID 0)
-- Dependencies: 205
-- Name: FUNCTION fn_objetosxperfil_val(smallint, smallint, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetosxperfil_val(smallint, smallint, character varying) IS 'Funcion que busca el permiso del perfil';


--
-- TOC entry 202 (class 1255 OID 16432)
-- Name: fn_perfiles_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idp alias for $1;
	res smallint :=0; -- Esta variable devolvera la respuesta (si es 0 no realizo ningun trabajo)
begin
	perform * from perfiles where idperfil = idp;
	if found then
		delete from perfiles where idperfil=idp;
		if found then
			res := 1; -- Se borro correctamente el registro
		end if;
	else
		res := 2; -- No existe el perfil a eliminar
	end if;
return res;
exception when foreign_key_violation then
return 3; -- Si este registro tiene hijos, se devuelve 3 para informar
end;
$_$;


ALTER FUNCTION public.fn_perfiles_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2093 (class 0 OID 0)
-- Dependencies: 202
-- Name: FUNCTION fn_perfiles_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_del(smallint) IS 'Funcion que borra registros de la tabla perfiles';


--
-- TOC entry 203 (class 1255 OID 16433)
-- Name: fn_perfiles_ins(smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_ins(smallint, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idp alias for $1;
  nom alias for $2;
  act alias for $3; 
  respuesta smallint := 0; -- Es el valor devuelto por la funcion (si es 0 no realizo ningun trabajo)
begin
      perform * from perfiles where nombre=nom;
      if not found then
         insert into perfiles values (idp, nom, act);
         if found then
            respuesta := 1; -- Se ingreso correctamente
         end if;
      else
         respuesta := 2; -- Ya existe el nombre del perfil
      end if;
return respuesta;
exception when unique_violation then
return 3; -- Si el codigo ya existe, no se inserta y se avisa.
end;
$_$;


ALTER FUNCTION public.fn_perfiles_ins(smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2094 (class 0 OID 0)
-- Dependencies: 203
-- Name: FUNCTION fn_perfiles_ins(smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_ins(smallint, character varying, boolean) IS 'Funcion que inserta datos en la tabla perfiles';


--
-- TOC entry 170 (class 1259 OID 16434)
-- Name: perfiles; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE perfiles (
    idperfil smallint NOT NULL,
    nombre character varying(25) NOT NULL,
    activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.perfiles OWNER TO usringenio;

--
-- TOC entry 2095 (class 0 OID 0)
-- Dependencies: 170
-- Name: TABLE perfiles; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE perfiles IS 'Tabla que contiene los perfiles de los usuarios del sistema';


--
-- TOC entry 204 (class 1255 OID 16438)
-- Name: fn_perfiles_sel(smallint, smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_sel(smallint, smallint, character varying, boolean) RETURNS SETOF perfiles
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	idp alias for $2;
	nom alias for $3;
	act alias for $4;
begin
	if tip=0 then -- Si el tipo de consulta es todos
		return query select idperfil, nombre, activo from perfiles;
	elsif tip=1 then -- Si el tipo de consulta es por idperfil
		return query select idperfil, nombre, activo from perfiles where idperfil=idp;
	elsif tip=2 then -- Si el tipo de consulta es por nombre del perfil
		return query select idperfil, nombre, activo from perfiles where nombre like nom;
	elsif tip=3 then -- Si el tipo de consulta es por si esta activo o no
		return query select idperfil, nombre, activo from perfiles where activo = act;
	end if;
end;$_$;


ALTER FUNCTION public.fn_perfiles_sel(smallint, smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2096 (class 0 OID 0)
-- Dependencies: 204
-- Name: FUNCTION fn_perfiles_sel(smallint, smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_sel(smallint, smallint, character varying, boolean) IS 'Funcion que permite consultar la tabla perfiles';


--
-- TOC entry 206 (class 1255 OID 16439)
-- Name: fn_perfiles_upd(smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_upd(smallint, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idp alias for $1;
	nom alias for $2;
	act alias for $3;
	res smallint := 0; -- Este es el valor a devolver (si es 0 no realizo ningun trabajo)
begin
	perform * from perfiles where idperfil=idp;
	if found then -- Si existe el codigo del perfil a modificar entonces:
	   perform * from perfiles where nombre=nom and idperfil<>idp;
	   if not found then
		update perfiles set nombre=nom, activo=act where idperfil=idp;
		if found then
			res := 1; -- Actualizacion correcta
		end if;
	   else
		res :=2; -- Ya existe ese nombre de perfil
	   end if;
	else -- Si no existe el codigo del perfil, no se hace nada
		res := 3;
	end if;
return res;
end;
$_$;


ALTER FUNCTION public.fn_perfiles_upd(smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2097 (class 0 OID 0)
-- Dependencies: 206
-- Name: FUNCTION fn_perfiles_upd(smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_upd(smallint, character varying, boolean) IS 'Funcion que actualiza la tabla perfiles';


--
-- TOC entry 220 (class 1255 OID 65558)
-- Name: fn_tiposdedocumento_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	itd alias for $1;
	res smallint :=0; -- Esta variable devolvera la respuesta (si es 0 no realizo ningun trabajo)
begin
	perform * from tiposdedocumento where idtipodedocumento = itd;
	if found then
		delete from tiposdedocumento where idtipodedocumento=itd;
		if found then
			res := 1; -- Se borro correctamente el registro
		end if;
	else
		res := 2; -- No existe el perfil a eliminar
	end if;
return res;
exception when foreign_key_violation then
return 3; -- Si este registro tiene hijos, se devuelve 3 para informar
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2098 (class 0 OID 0)
-- Dependencies: 220
-- Name: FUNCTION fn_tiposdedocumento_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_del(smallint) IS 'Funcion que borra registros de la tabla tipos de documento';


--
-- TOC entry 226 (class 1255 OID 65547)
-- Name: fn_tiposdedocumento_ins(character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_ins(character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  abr alias for $1;
  nom alias for $2;
  act alias for $3; 
  respuesta smallint := 0; -- Es el valor devuelto por la funcion (si es 0 no realizo ningun trabajo)
begin
      insert into tiposdedocumento (abreviatura, tipodedocumento, activo) values (abr, nom, act);
      if found then
          respuesta = 1;
      end if;
return respuesta;
exception when unique_violation then
return 3; -- Si el codigo ya existe, no se inserta y se avisa.
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_ins(character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2099 (class 0 OID 0)
-- Dependencies: 226
-- Name: FUNCTION fn_tiposdedocumento_ins(character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_ins(character varying, character varying, boolean) IS 'Funcion que inserta datos en la tabla tiposdedocumento';


--
-- TOC entry 180 (class 1259 OID 57353)
-- Name: sqc_tiposdocumento; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_tiposdocumento
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_tiposdocumento OWNER TO usringenio;

--
-- TOC entry 181 (class 1259 OID 57361)
-- Name: tiposdedocumento; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE tiposdedocumento (
    idtipodedocumento smallint DEFAULT nextval('sqc_tiposdocumento'::regclass) NOT NULL,
    abreviatura character varying(2) NOT NULL,
    tipodedocumento character varying(25) NOT NULL,
    activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.tiposdedocumento OWNER TO usringenio;

--
-- TOC entry 2100 (class 0 OID 0)
-- Dependencies: 181
-- Name: TABLE tiposdedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE tiposdedocumento IS 'Tabla que contiene los tipos de documento';


--
-- TOC entry 2101 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN tiposdedocumento.idtipodedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.idtipodedocumento IS 'Identificador unico del tipo de documento';


--
-- TOC entry 2102 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN tiposdedocumento.abreviatura; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.abreviatura IS 'Abreviatura del tipo de documento';


--
-- TOC entry 2103 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN tiposdedocumento.tipodedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.tipodedocumento IS 'Nombre del tipo de documento';


--
-- TOC entry 2104 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN tiposdedocumento.activo; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.activo IS 'Identifica si el tipo de documento estÃ¡ activo o no';


--
-- TOC entry 212 (class 1255 OID 65557)
-- Name: fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean) RETURNS SETOF tiposdedocumento
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	idt alias for $2;
	abr alias for $3;
	nom alias for $4;
	act alias for $5;
begin
	if tip=0 then -- Si el tipo de consulta es todos
		return query select idtipodedocumento, abreviatura, tipodedocumento, activo from tiposdedocumento;
	elsif tip=1 then -- Si el tipo de consulta es por idtipodedocumento
		return query select idtipodedocumento, abreviatura, tipodedocumento, activo from tiposdedocumento where idtipodedocumento=idt;
	elsif tip=2 then -- Si el tipo de consulta es por abreviatura del tipodedocumento
		return query select idtipodedocumento, abreviatura, tipodedocumento, activo from tiposdedocumento where abreviatura like abr;
	elsif tip=3 then -- Si el tipo de consulta es por el nombre del tipo de documento
		return query select idtipodedocumento, abreviatura, tipodedocumento, activo from tiposdedocumento where tipodedocumento like nom;
	elsif tip=4 then -- Si el tipo de consulta es por activo
		return query select idtipodedocumento, abreviatura, tipodedocumento, activo from tiposdedocumento where activo = act;
	end if;
end;$_$;


ALTER FUNCTION public.fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2105 (class 0 OID 0)
-- Dependencies: 212
-- Name: FUNCTION fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean) IS 'Funcion que permite consultar la tabla tipos de documento';


--
-- TOC entry 227 (class 1255 OID 65561)
-- Name: fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	itd alias for $1;
	abr alias for $2;
	nom alias for $3;
	act alias for $4;
	res smallint := 0; -- Este es el valor a devolver (si es 0 no realizo ningun trabajo)
begin
    update tiposdedocumento set abreviatura = abr, nombre=nom, activo=act where idtipodedocumento=itd;
    if found then
	res := 1; -- Actualizacion correcta
    else -- Si no existe el codigo del tipo de documento, no se hace nada
	res := 2; -- No existe el cÃ³digo del tipo de documento
    end if;
return res;
exception when unique_violation then
    return 3; -- Excepcion de unique violation
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2106 (class 0 OID 0)
-- Dependencies: 227
-- Name: FUNCTION fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean) IS 'Funcion que actualiza la tabla tipos de documento';


--
-- TOC entry 222 (class 1255 OID 41020)
-- Name: fn_usuarios_blo(integer, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_blo(integer, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
DECLARE
  ide alias for $1;
  blo alias for $2;
BEGIN
  perform * from usuarios where usu_id = ide and usu_bloqueado = blo;
  IF FOUND THEN
    return 1; -- El usuario ya se encuentra en el estado solicitado
  ELSE
    IF blo = true THEN
      update usuarios set usu_bloqueado = true and usu_fechabloqueado = now();
      IF FOUND THEN
        return 2; -- BLOQUEADO CORRECTAMENTE
      END IF;
    ELSE
      update usuarios set usu_bloqueado = false and usu_fechadesbloqueado = now();
      IF FOUND THEN
        return 2; -- DESBLOQUEADO CORRECTAMENTE
      END IF;
    END IF;
  END IF;
END;
$_$;


ALTER FUNCTION public.fn_usuarios_blo(integer, boolean) OWNER TO usringenio;

--
-- TOC entry 2107 (class 0 OID 0)
-- Dependencies: 222
-- Name: FUNCTION fn_usuarios_blo(integer, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_blo(integer, boolean) IS 'Funcion que permite bloquear o desbloquear un usuario';


--
-- TOC entry 219 (class 1255 OID 40990)
-- Name: fn_usuarios_cla(integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_cla(integer, character varying, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
  cla alias for $2;
  cnu alias for $3;
begin
  perform * from usuarios where usu_id=idu and usu_clave=cla;
  if found then
    update usuarios set usu_clave=cnu where usu_id=idu;
    if found then
      return 1; -- Actualizacion correcta
    else
      return 2; -- Error de actualizacion
    end if;
  else
    return 3; -- Clave anterior incorrecta
  end if;
end;
$_$;


ALTER FUNCTION public.fn_usuarios_cla(integer, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2108 (class 0 OID 0)
-- Dependencies: 219
-- Name: FUNCTION fn_usuarios_cla(integer, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_cla(integer, character varying, character varying) IS 'Funcion que permite cambiar la clave del usuario';


--
-- TOC entry 211 (class 1255 OID 40991)
-- Name: fn_usuarios_del(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_del(integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
begin
  delete from usuarios where usu_id=idu;
  if found then
    return 1; -- Se actualizo correctamente el registro
  else
    return 2; -- No se encontro el registro a modificar
  end if;
exception
  when foreign_key_violation then
    return 3; -- Tiene hijos y no se puede eliminar
end;
$_$;


ALTER FUNCTION public.fn_usuarios_del(integer) OWNER TO usringenio;

--
-- TOC entry 2109 (class 0 OID 0)
-- Dependencies: 211
-- Name: FUNCTION fn_usuarios_del(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_del(integer) IS 'Funcion que borra los registros de la tabla usuarios';


--
-- TOC entry 218 (class 1255 OID 40992)
-- Name: fn_usuarios_ing(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_ing(integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
begin
  update usuarios set usu_ultimoingreso=now() where usu_id=idu;
  if found then
    return 1; -- Se actualizo correctamente el registro
  else
    return 2; -- No existe el usuario a actualizar
  end if;
end;
$_$;


ALTER FUNCTION public.fn_usuarios_ing(integer) OWNER TO usringenio;

--
-- TOC entry 2110 (class 0 OID 0)
-- Dependencies: 218
-- Name: FUNCTION fn_usuarios_ing(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_ing(integer) IS 'Funcion que actualiza la fecha del ultimo ingreso del usuario';


--
-- TOC entry 223 (class 1255 OID 49160)
-- Name: fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
  cod alias for $1;
  nom alias for $2;
  ape alias for $3;
  cor alias for $4;
  ide alias for $5;
  per alias for $6;
begin
  insert into usuarios values (default, cod, nom, ape, cor, ide, per, default, default, default, default, default, null, null);
  if found then
    return currval('sqc_usuarios'); -- Se ingreso correctamente el registro
  else
    return 0; -- Error de la base de datos
  end if;
exception 
  when unique_violation then
    return -1; -- Si ya existe el codigo a ingresar
  when foreign_key_violation then
    return -2; -- No existe el perfil a asignar
end;
$_$;


ALTER FUNCTION public.fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint) OWNER TO postgres;

--
-- TOC entry 2111 (class 0 OID 0)
-- Dependencies: 223
-- Name: FUNCTION fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint) IS 'Funcion que permite ingresar los registros a la tabla usuarios';


--
-- TOC entry 224 (class 1255 OID 41018)
-- Name: fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_sel(smallint DEFAULT (-1), integer DEFAULT (-1), character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, smallint DEFAULT (-1), boolean DEFAULT NULL::boolean, date DEFAULT NULL::date, date DEFAULT NULL::date, boolean DEFAULT NULL::boolean, date DEFAULT NULL::date, date DEFAULT NULL::date, character varying DEFAULT ''::character varying) RETURNS SETOF t_usuarios
    LANGUAGE plpgsql
    AS $_$
declare
  tip alias for $1; -- Tipo de busqueda
  idu alias for $2; -- Id del usuario
  cod alias for $3; -- Codigo
  nom alias for $4; -- Nombres
  ape alias for $5; -- Apellidos
  cor alias for $6; -- Correo
  ide alias for $7; -- Identificacion
  per alias for $8; -- Codigo Perfil
  ccl alias for $9; -- Cambio de clave
  fcr alias for $10; -- Fecha de creacion
  ing alias for $11; -- Fecha de ultimo ingreso
  blo alias for $12; -- Bloqueado
  fbl alias for $13; -- Fecha de bloqueado
  fdb alias for $14; -- Fecha de desbloqueo
  cla alias for $15; -- Clave
  consulta TEXT = 'select usu_id, usu_codigo, usu_nombres, usu_apellidos, usu_correo, usu_identificacion, usu_perfil, perfiles.nombre, perfiles.activo, usu_cambiarclave, usu_fechacreacion, usu_ultimoingreso, usu_bloqueado, usu_fechabloqueado, usu_fechadesbloqueado from usuarios inner join perfiles on usu_perfil=idperfil';
begin
  if tip=0 then -- Consulta de todos los registros
    consulta = consulta;
  elsif tip=1 then -- Consulta por id de usuario
    consulta = consulta || ' where usu_id = ' || idu;
  elsif tip=2 then -- Consulta por codigo de usuario
    consulta = consulta || ' where usu_codigo = ' || quote_literal(cod);
  elsif tip=3 then -- Consulta por nombre de usuario
    consulta = consulta || ' where usu_nombres like ' || quote_literal(nom);
  elsif tip=4 then -- Consulta por apellido de usuario
    consulta = consulta || ' where usu_apellidos like ' || quote_literal(ape);
  elsif tip=5 then -- Consulta por correo
    consulta = consulta || ' where usu_correo like ' || quote_literal(cor);
  elsif tip=6 then -- Consulta por identificacion
    consulta = consulta || ' where usu_identificacion = ' || quote_literal(ide);
  elsif tip=7 then -- Consulta por perfil de usuario
    consulta = consulta || ' where usu_perfil = ' || per;
  elsif tip=8 then -- Consulta por perfil activo o no
    consulta = consulta || ' where perfiles.activo = ' || blo;
  elsif tip=9 then -- Consulta por cambio de clave
    consulta = consulta || ' where usu_cambiarclave = ' || ccl;
  elsif tip=10 then -- Consulta por fecha de creacion exacta
    consulta = consulta || ' where date(usu_fechacreacion) = ' || quote_literal(fcr);
  elsif tip=11 then -- Consulta por fecha de creacion menor o igual a
    consulta = consulta || ' where date(usu_fechacreacion) <= ' || quote_literal(fcr);
  elsif tip=12 then -- Consulta por fecha de creacion mayor o igual
    consulta = consulta || ' where date(usu_fechacreacion) >= ' || quote_literal(fcr);
  elsif tip=13 then -- Consulta por fecha de ingreso exacta
    consulta = consulta || ' where date(usu_ultimoingreso) = ' || quote_literal(ing);
  elsif tip=14 then -- Consulta por fecha de ingreso menor o igual a
    consulta = consulta || ' where date(usu_ultimoingreso) <= ' || quote_literal(ing);
  elsif tip=15 then -- Consulta por fecha de ingreso mayor o igual a
    consulta = consulta || ' where date(usu_ultimoingreso) >= ' || quote_literal(ing);
  elsif tip=16 then -- Consulta por bloqueado
    consulta = consulta || ' where usu_bloqueado = ' || blo;
  elsif tip=17 then -- Consulta de fecha de bloqueo exacta
    consulta = consulta || ' where date(usu_fechabloqueado) = ' || quote_literal(fbl);
  elsif tip=18 then -- Consulta de fecha de bloqueo menor o igual
    consulta = consulta || ' where date(usu_fechabloqueado) <= ' || quote_literal(fbl);
  elsif tip=19 then -- Consulta de fecha de bloqueo mayor o igual
    consulta = consulta || ' where date(usu_fechabloqueado) >= ' || quote_literal(fbl);
  elsif tip=20 then -- Consulta de fecha de desbloqueo exacta
    consulta = consulta || ' where date(usu_fechadesbloqueado) = ' || quote_literal(fdb);
  elsif tip=21 then -- Consulta de fecha de desbloqueo menor o igual
    consulta = consulta || ' where date(usu_fechadesbloqueado) <= ' || quote_literal(fdb);
  elsif tip=22 then -- Consulta de fecha de desbloqueo mayor o igual
    consulta = consulta || ' where date(usu_fechadesbloqueado) >= ' || quote_literal(fdb);
  elsif tip=23 then -- Consulta de autenticacion
    consulta = consulta || ' where usu_codigo = ' || quote_literal(cod) || ' and usu_clave = ' || quote_literal(cla);
  end if;
  return query execute consulta;
end;
$_$;


ALTER FUNCTION public.fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying) OWNER TO usringenio;

--
-- TOC entry 2112 (class 0 OID 0)
-- Dependencies: 224
-- Name: FUNCTION fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying) IS 'Funcion que consulta los registros de la tabla usuarios';


--
-- TOC entry 221 (class 1255 OID 41019)
-- Name: fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
  cod alias for $2;
  nom alias for $3;
  ape alias for $4;
  cor alias for $5;
  ide alias for $6;
  per alias for $7;
begin
  update usuarios set usu_codigo=cod, usu_nombres=nom, usu_apellidos=ape, usu_correo=cor, usu_identificacion = ide, usu_perfil=per where usu_id=idu;
  if found then
    return 1; -- Se actualizo correctamente el registro
  else
    return 2; -- No se encontro el registro a modificar
  end if;
exception
  when foreign_key_violation then
    return 3; -- No existe el perfil a asignar
  when unique_violation then
    return 4; -- No se puede actualizar ese codigo de usuario
end;
$_$;


ALTER FUNCTION public.fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint) OWNER TO usringenio;

--
-- TOC entry 2113 (class 0 OID 0)
-- Dependencies: 221
-- Name: FUNCTION fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint) IS 'Funcion que actualiza los registros de la tabla usuarios (exceptuando la clave)';


--
-- TOC entry 179 (class 1259 OID 57351)
-- Name: sqc_estudiantes; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_estudiantes
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_estudiantes OWNER TO usringenio;

--
-- TOC entry 2114 (class 0 OID 0)
-- Dependencies: 179
-- Name: SEQUENCE sqc_estudiantes; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_estudiantes IS 'Secuencia del id unico del estudiante';


--
-- TOC entry 182 (class 1259 OID 57368)
-- Name: estudiantes; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE estudiantes (
    idestudiante integer DEFAULT nextval('sqc_estudiantes'::regclass) NOT NULL,
    tipodedocumento integer NOT NULL,
    numerodeidentificacion character varying(12) NOT NULL,
    apellidos character varying(100) NOT NULL,
    nombres character varying(100) NOT NULL,
    fechadenacimiento date NOT NULL,
    direccion character varying(100) NOT NULL,
    telefono character varying(20) NOT NULL,
    celular character varying(10) NOT NULL,
    correoelectronico character varying(100) NOT NULL
);


ALTER TABLE public.estudiantes OWNER TO usringenio;

--
-- TOC entry 2115 (class 0 OID 0)
-- Dependencies: 182
-- Name: TABLE estudiantes; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE estudiantes IS 'Estudiantes';


--
-- TOC entry 2116 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.idestudiante; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.idestudiante IS 'IdentificaciÃ³n Ãºnica del estudiante';


--
-- TOC entry 2117 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.tipodedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.tipodedocumento IS 'Tipo de documento actual del estudiante';


--
-- TOC entry 2118 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.numerodeidentificacion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.numerodeidentificacion IS 'NÃºmero de identificaciÃ³n del estudiante';


--
-- TOC entry 2119 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.apellidos; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.apellidos IS 'apellidos del estudiante';


--
-- TOC entry 2120 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.nombres; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.nombres IS 'Nombres del estudiante';


--
-- TOC entry 2121 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.fechadenacimiento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.fechadenacimiento IS 'Fecha de nacimiento del estudiante';


--
-- TOC entry 2122 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.direccion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.direccion IS 'DirecciÃ³n principal';


--
-- TOC entry 2123 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.telefono; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.telefono IS 'Telefono principal';


--
-- TOC entry 2124 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.celular; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.celular IS 'NÃºmero celular del estudiante';


--
-- TOC entry 2125 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN estudiantes.correoelectronico; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN estudiantes.correoelectronico IS 'correo electrÃ³nico principal';


--
-- TOC entry 171 (class 1259 OID 16445)
-- Name: objetosxperfil; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE objetosxperfil (
    oxp_perfil smallint NOT NULL,
    oxp_objeto character varying(15) NOT NULL,
    oxp_insertar boolean DEFAULT false NOT NULL,
    oxp_modificar boolean DEFAULT false NOT NULL,
    oxp_borrar boolean DEFAULT false NOT NULL,
    oxp_consultar boolean DEFAULT false NOT NULL
);


ALTER TABLE public.objetosxperfil OWNER TO usringenio;

--
-- TOC entry 2126 (class 0 OID 0)
-- Dependencies: 171
-- Name: TABLE objetosxperfil; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE objetosxperfil IS 'Estos son los permisos que tendra cada perfil';


--
-- TOC entry 172 (class 1259 OID 16453)
-- Name: prueba; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE prueba (
    hija smallint
);


ALTER TABLE public.prueba OWNER TO usringenio;

--
-- TOC entry 2127 (class 0 OID 0)
-- Dependencies: 172
-- Name: TABLE prueba; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE prueba IS 'Hola';


--
-- TOC entry 175 (class 1259 OID 24607)
-- Name: sqc_usuarios; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_usuarios
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_usuarios OWNER TO usringenio;

--
-- TOC entry 2128 (class 0 OID 0)
-- Dependencies: 175
-- Name: SEQUENCE sqc_usuarios; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_usuarios IS 'Secuencia para el consecutivo de usuarios';


--
-- TOC entry 177 (class 1259 OID 40993)
-- Name: usuarios; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE usuarios (
    usu_id integer DEFAULT nextval('sqc_usuarios'::regclass) NOT NULL,
    usu_codigo character varying(25) NOT NULL,
    usu_nombres character varying(50) NOT NULL,
    usu_apellidos character varying(50) NOT NULL,
    usu_correo character varying(100) NOT NULL,
    usu_identificacion character varying(12) NOT NULL,
    usu_perfil smallint NOT NULL,
    usu_clave character varying(32) DEFAULT md5('Clave123+'::text) NOT NULL,
    usu_cambiarclave boolean DEFAULT true NOT NULL,
    usu_fechacreacion timestamp without time zone DEFAULT now() NOT NULL,
    usu_ultimoingreso timestamp without time zone DEFAULT now() NOT NULL,
    usu_bloqueado boolean DEFAULT false NOT NULL,
    usu_fechabloqueado timestamp without time zone,
    usu_fechadesbloqueado timestamp without time zone
);


ALTER TABLE public.usuarios OWNER TO usringenio;

--
-- TOC entry 2129 (class 0 OID 0)
-- Dependencies: 177
-- Name: TABLE usuarios; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE usuarios IS 'Tabla que contiene los usuarios del sistema. La clave puede ser vacia ya que el metodo de autenticacion puede ser desde LDAP. Pero es necesaria ya que esta tabla es la que contiene los perfiles de los usuarios.';


--
-- TOC entry 2050 (class 0 OID 24595)
-- Dependencies: 174
-- Data for Name: configuracion; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY configuracion (idconfiguracion, parametro, valorparametro, activo) FROM stdin;
2	AUTENTICACION	BD	t
3	TIEMPOCREDENCIAL	30	t
5	PRUEBA	ACTUALIZADO CORRECTAMENTE	f
\.


--
-- TOC entry 2052 (class 0 OID 24635)
-- Dependencies: 176
-- Data for Name: credenciales; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY credenciales (cre_id, cre_idusuario, cre_nombre, cre_hostip, cre_hostnombre, cre_creacion, cre_ultimaaccion) FROM stdin;
197	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 18:39:52.579	2013-12-09 18:39:52.579
198	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 18:40:59.607	2013-12-09 18:40:59.607
199	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 18:43:07.183	2013-12-09 18:43:07.183
200	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 18:58:50.613	2013-12-09 18:58:50.613
201	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 19:01:13.796	2013-12-09 19:01:13.796
202	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 19:03:49.505	2013-12-09 19:03:49.505
203	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2013-12-09 19:06:09.173	2013-12-09 19:06:09.173
\.


--
-- TOC entry 2057 (class 0 OID 57368)
-- Dependencies: 182
-- Data for Name: estudiantes; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY estudiantes (idestudiante, tipodedocumento, numerodeidentificacion, apellidos, nombres, fechadenacimiento, direccion, telefono, celular, correoelectronico) FROM stdin;
\.


--
-- TOC entry 2045 (class 0 OID 16423)
-- Dependencies: 169
-- Data for Name: objetos; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY objetos (obj_codigo, obj_nombre, obj_descripcion, obj_activo) FROM stdin;
SEGPER	PERFILES DEL SISTEMA	PERFILES DEL SISTEMA	t
SEGUSU	USUARIOS DEL SISTEMA	USUARIOS DEL SISTEMA	t
CONFIG	CONFIGURACION DEL SISTEMA	PERMITE LA CONFIGURACION DEL SISTEMA	t
PARTDO	TIPOS DE DOCUMENTOS	TIPOS DE DOCUMENTOS - PARAMETROS	t
\.


--
-- TOC entry 2047 (class 0 OID 16445)
-- Dependencies: 171
-- Data for Name: objetosxperfil; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY objetosxperfil (oxp_perfil, oxp_objeto, oxp_insertar, oxp_modificar, oxp_borrar, oxp_consultar) FROM stdin;
3	SEGUSU	f	f	f	f
1	CONFIG	f	f	f	f
2	CONFIG	f	f	f	f
5	CONFIG	f	f	f	f
7	CONFIG	f	f	f	f
3	CONFIG	f	f	f	f
3	SEGPER	t	f	f	f
4	SEGPER	f	f	f	f
4	SEGUSU	f	f	f	f
4	CONFIG	f	f	f	f
6	SEGPER	f	f	f	f
6	SEGUSU	f	f	f	f
6	CONFIG	f	f	f	f
8	SEGPER	f	f	f	f
8	SEGUSU	f	f	f	f
8	CONFIG	f	f	f	f
9	SEGPER	f	f	f	f
9	SEGUSU	f	f	f	f
9	CONFIG	f	f	f	f
10	SEGPER	f	f	f	f
10	SEGUSU	f	f	f	f
10	CONFIG	f	f	f	f
11	SEGPER	f	f	f	f
11	SEGUSU	f	f	f	f
11	CONFIG	f	f	f	f
2	SEGPER	t	t	f	t
2	PARTDO	f	f	f	f
5	PARTDO	f	f	f	f
7	PARTDO	f	f	f	f
3	PARTDO	f	f	f	f
4	PARTDO	f	f	f	f
6	PARTDO	f	f	f	f
8	PARTDO	f	f	f	f
9	PARTDO	f	f	f	f
10	PARTDO	f	f	f	f
11	PARTDO	f	f	f	t
1	PARTDO	f	f	f	t
\.


--
-- TOC entry 2046 (class 0 OID 16434)
-- Dependencies: 170
-- Data for Name: perfiles; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY perfiles (idperfil, nombre, activo) FROM stdin;
1	Admin Sistema	t
2	Probando no mas	t
5	Pepito	t
7	jasret	t
3	Prueba Trigger	f
4	LISTOS O QUE	t
6	EXCELENTE	t
8	Cajero	f
9	Mesero	t
10	YA EXPORTO	t
11	RECORDANDO	t
\.


--
-- TOC entry 2048 (class 0 OID 16453)
-- Dependencies: 172
-- Data for Name: prueba; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY prueba (hija) FROM stdin;
1
1
1
2
\.


--
-- TOC entry 2130 (class 0 OID 0)
-- Dependencies: 173
-- Name: sqc_configuracion; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_configuracion', 5, true);


--
-- TOC entry 2131 (class 0 OID 0)
-- Dependencies: 168
-- Name: sqc_credencial; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_credencial', 203, true);


--
-- TOC entry 2132 (class 0 OID 0)
-- Dependencies: 179
-- Name: sqc_estudiantes; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_estudiantes', 1, false);


--
-- TOC entry 2133 (class 0 OID 0)
-- Dependencies: 180
-- Name: sqc_tiposdocumento; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_tiposdocumento', 4, true);


--
-- TOC entry 2134 (class 0 OID 0)
-- Dependencies: 175
-- Name: sqc_usuarios; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_usuarios', 4, true);


--
-- TOC entry 2056 (class 0 OID 57361)
-- Dependencies: 181
-- Data for Name: tiposdedocumento; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY tiposdedocumento (idtipodedocumento, abreviatura, tipodedocumento, activo) FROM stdin;
1	CC	CÃDULA DE CIUDADANÃA	t
2	TI	TARJETA DE IDENTIDAD	t
3	CE	CÃDULA DE EXTRANJERÃA	t
4	PA	PASAPORTE	t
\.


--
-- TOC entry 2053 (class 0 OID 40993)
-- Dependencies: 177
-- Data for Name: usuarios; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY usuarios (usu_id, usu_codigo, usu_nombres, usu_apellidos, usu_correo, usu_identificacion, usu_perfil, usu_clave, usu_cambiarclave, usu_fechacreacion, usu_ultimoingreso, usu_bloqueado, usu_fechabloqueado, usu_fechadesbloqueado) FROM stdin;
3	admin	ADMINISTRADOR	DEL SISTEMA	ALEXYSLC@GMAIL.COM	SIN	1	2cbcd694efea34abdf2f1857595eaa17	t	2013-04-13 14:05:23.716	2013-04-13 14:05:23.716	f	\N	\N
4	alozada	ALEXYS	LOZADA	ALEXYSLC@GMAIL.COM	80005465	1	2cbcd694efea34abdf2f1857595eaa17	t	2013-04-13 14:09:42.274	2013-04-13 14:09:42.274	f	\N	\N
\.


--
-- TOC entry 2013 (class 2606 OID 16464)
-- Name: objetos_pkey; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY objetos
    ADD CONSTRAINT objetos_pkey PRIMARY KEY (obj_codigo);


--
-- TOC entry 2019 (class 2606 OID 24601)
-- Name: pk_configuracion; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY configuracion
    ADD CONSTRAINT pk_configuracion PRIMARY KEY (idconfiguracion);


--
-- TOC entry 2021 (class 2606 OID 24642)
-- Name: pk_cre_id; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY credenciales
    ADD CONSTRAINT pk_cre_id PRIMARY KEY (cre_id);


--
-- TOC entry 2035 (class 2606 OID 57373)
-- Name: pk_estudiantes; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY estudiantes
    ADD CONSTRAINT pk_estudiantes PRIMARY KEY (idestudiante);


--
-- TOC entry 2017 (class 2606 OID 16468)
-- Name: pk_oxp_oxp; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY objetosxperfil
    ADD CONSTRAINT pk_oxp_oxp PRIMARY KEY (oxp_perfil, oxp_objeto);


--
-- TOC entry 2015 (class 2606 OID 16470)
-- Name: pk_per_id; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY perfiles
    ADD CONSTRAINT pk_per_id PRIMARY KEY (idperfil);


--
-- TOC entry 2029 (class 2606 OID 65550)
-- Name: pk_tiposdedocumento; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY tiposdedocumento
    ADD CONSTRAINT pk_tiposdedocumento PRIMARY KEY (idtipodedocumento);


--
-- TOC entry 2023 (class 2606 OID 41003)
-- Name: pk_usuario; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT pk_usuario PRIMARY KEY (usu_id);


--
-- TOC entry 2031 (class 2606 OID 65544)
-- Name: uk_abr_tiposdedocumento; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY tiposdedocumento
    ADD CONSTRAINT uk_abr_tiposdedocumento UNIQUE (abreviatura);


--
-- TOC entry 2037 (class 2606 OID 57375)
-- Name: uk_estudiantes; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY estudiantes
    ADD CONSTRAINT uk_estudiantes UNIQUE (numerodeidentificacion);


--
-- TOC entry 2033 (class 2606 OID 65546)
-- Name: uk_tdd_tiposdedocumento; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY tiposdedocumento
    ADD CONSTRAINT uk_tdd_tiposdedocumento UNIQUE (tipodedocumento);


--
-- TOC entry 2025 (class 2606 OID 41005)
-- Name: uk_usu_cod; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT uk_usu_cod UNIQUE (usu_codigo);


--
-- TOC entry 2027 (class 2606 OID 41022)
-- Name: uk_usu_ide; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT uk_usu_ide UNIQUE (usu_identificacion);


--
-- TOC entry 2042 (class 2620 OID 16473)
-- Name: tr_objetosxperfil_obj; Type: TRIGGER; Schema: public; Owner: usringenio
--

CREATE TRIGGER tr_objetosxperfil_obj AFTER INSERT ON objetos FOR EACH ROW EXECUTE PROCEDURE fn_objetosxperfil_triupdobj();


--
-- TOC entry 2135 (class 0 OID 0)
-- Dependencies: 2042
-- Name: TRIGGER tr_objetosxperfil_obj ON objetos; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TRIGGER tr_objetosxperfil_obj ON objetos IS 'Cada vez que se ingresa un nuevo registro a la tabla objetos, se crean los registros en la tabla objetosxperfil para cada perfil';


--
-- TOC entry 2043 (class 2620 OID 16474)
-- Name: tr_objetosxperfil_per; Type: TRIGGER; Schema: public; Owner: usringenio
--

CREATE TRIGGER tr_objetosxperfil_per AFTER INSERT ON perfiles FOR EACH ROW EXECUTE PROCEDURE fn_objetosxperfil_triupdper();


--
-- TOC entry 2040 (class 2606 OID 16480)
-- Name: fk_prueba; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY prueba
    ADD CONSTRAINT fk_prueba FOREIGN KEY (hija) REFERENCES perfiles(idperfil) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2041 (class 2606 OID 41006)
-- Name: fk_usu_per; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT fk_usu_per FOREIGN KEY (usu_perfil) REFERENCES perfiles(idperfil) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2038 (class 2606 OID 16490)
-- Name: objetosxperfil_oxp_objetos_fkey; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY objetosxperfil
    ADD CONSTRAINT objetosxperfil_oxp_objetos_fkey FOREIGN KEY (oxp_objeto) REFERENCES objetos(obj_codigo) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2039 (class 2606 OID 16495)
-- Name: objetosxperfil_oxp_perfil_fkey; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY objetosxperfil
    ADD CONSTRAINT objetosxperfil_oxp_perfil_fkey FOREIGN KEY (oxp_perfil) REFERENCES perfiles(idperfil) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2065 (class 0 OID 0)
-- Dependencies: 6
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2013-12-09 19:12:13

--
-- PostgreSQL database dump complete
--

